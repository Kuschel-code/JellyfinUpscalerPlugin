name: 🚀 Simple Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PLUGIN_VERSION: "1.3.6.5"
  DOTNET_VERSION: "8.0.x"

jobs:
  # Simple build test
  build:
    name: 🔨 Build Plugin
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🔨 Build plugin
      run: dotnet build --configuration Release --no-restore

    - name: ✅ Build Success
      run: |
        echo "🎉 Build completed successfully!"
        echo "Plugin DLL location: bin/Release/net8.0/JellyfinUpscalerPlugin.dll"
        if [ -f "bin/Release/net8.0/JellyfinUpscalerPlugin.dll" ]; then
          echo "✅ Plugin DLL found!"
          ls -la bin/Release/net8.0/JellyfinUpscalerPlugin.dll
        else
          echo "❌ Plugin DLL not found!"
          exit 1
        fi

  # Test on multiple platforms
  compatibility:
    name: 🧪 Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore and Build
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: ✅ Platform Test Success
      run: echo "✅ Build successful on ${{ matrix.os }}!"

  # Create release package
  package:
    name: 📦 Create Package
    runs-on: ubuntu-latest
    needs: [build, compatibility]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET 8.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔨 Build plugin
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: 📦 Create ZIP package
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Create package directory
        mkdir -p dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}
        
        # Copy essential files
        cp Plugin.cs dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        cp PluginConfiguration.cs dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        cp manifest.json dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        cp meta.json dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        cp bin/Release/net8.0/JellyfinUpscalerPlugin.dll dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        cp README.md dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        cp LICENSE dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        
        # Copy Manager Classes
        cp *.cs dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/ 2>/dev/null || true
        
        # Copy web directory if exists
        if [ -d "web" ]; then
          cp -r web dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        fi
        
        # Copy Configuration directory if exists
        if [ -d "Configuration" ]; then
          cp -r Configuration dist/JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        fi
        
        # Create ZIP
        cd dist
        zip -r JellyfinUpscalerPlugin-v${{ env.PLUGIN_VERSION }}-Serialization-Fixed.zip JellyfinUpscalerPlugin_v${{ env.PLUGIN_VERSION }}/
        
        # Calculate SHA256
        sha256sum JellyfinUpscalerPlugin-v${{ env.PLUGIN_VERSION }}-Serialization-Fixed.zip > SHA256SUMS.txt
        
        echo "📦 Package created:"
        ls -la *.zip
        echo "🔐 Checksum:"
        cat SHA256SUMS.txt

    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: plugin-package-v${{ env.PLUGIN_VERSION }}
        path: |
          dist/*.zip
          dist/SHA256SUMS.txt

    - name: 🎉 Package Success
      run: |
        echo "🎉 Package created successfully!"
        echo "Ready for manual GitHub Release creation!"